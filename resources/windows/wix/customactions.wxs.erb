<?xml version="1.0" encoding="windows-1252"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">

  <Fragment>
    <ComponentGroup Id="FragmentCustomActions" />

    <!-- Properties for existing Ini Values - expanding the remembered properties pattern just a bit
    -->

    <!-- Custom Actions to handle command line property values that override
         remembered property values -->
    <!-- INSTALLDIR -->
    <CustomAction
      Id="SaveCmdLineInstallDir"
      Property="CMDLINE_INSTALLDIR"
      Value="[INSTALLDIR]"
      Execute="firstSequence" />
    <CustomAction
      Id="SetFromCmdLineInstallDir"
      Property="INSTALLDIR"
      Value="[CMDLINE_INSTALLDIR]"
      Execute="firstSequence" />

    <!-- INSTALLDIR is not available for Deferred Custom Actions.  So we need to save it for later user -->
    <CustomAction Id="SetPropertyForExtractTarballs" Property="ExtractTarballs" Value="[INSTALLDIR]" />
    <Binary Id='TarballScript' SourceFile='..\tarball.vbs' />
    <CustomAction
      Id="ExtractTarballs"
      BinaryKey="TarballScript"
      VBScriptCall="ExtractTarballs"
      Execute="deferred"
      Return="check"
      Impersonate="yes" />

    <!-- INSTALLDIR is not available for Deferred Custom Actions.  So we need to save it for later user -->
    <CustomAction Id="SetPropertyForRemoveTarballs" Property="RemoveTarballs" Value="[INSTALLDIR]" />
    <CustomAction
      Id="RemoveTarballs"
      BinaryKey="TarballScript"
      VBScriptCall="RemoveTarballs"
      Execute="deferred"
      Return="check"
      Impersonate="yes" />

    <%- if @platform.architecture == "x86" -%>
    <!-- If these fail, we don't want to fail the installer -->
    <!-- We can't do a registry search for powershell's installed location because it will turn up the WOW64Node version due to not being able to bypass redirection in RegistrySearch
         So we will assume the default install location and if it fails, we will ignore the error.
         this is the only way to grab path without expanding variables
    -->
    <CustomAction
      Id="Remove64BitPath_SetProp"
      Property="Remove64BitPath"
      Value="&quot;[%WINDIR]\System32\WindowsPowerShell\v1.0\powershell.exe&quot; -NoLogo -NonInteractive -InputFormat None -NoProfile -ExecutionPolicy Bypass -Command &quot;[\[]System.Text.RegularExpressions.Regex[\]]::Replace([\[]Microsoft.Win32.Registry[\]]::LocalMachine.OpenSubKey(&apos;SYSTEM\CurrentControlSet\Control\Session Manager\Environment\&apos;).GetValue(&apos;PATH&apos;, &apos;&apos;, [\[]Microsoft.Win32.RegistryValueOptions[\]]::DoNotExpandEnvironmentNames).ToString(),  [\[]System.Text.RegularExpressions.Regex[\]]::Escape(&apos;[ProgramFiles64Folder]<%= settings[:pl_company_name] %>\<%= settings[:product_id] %>\bin&apos;) + &apos;([\?]&gt;;)[\?]&apos;, &apos;&apos;, [\[]System.Text.RegularExpressions.RegexOptions[\]]::IgnoreCase) | %[\{][\[]System.Environment[\]]::SetEnvironmentVariable(&apos;PATH&apos;,$_, &apos;Machine&apos;)[\}]&quot;"
      Execute="immediate" />
    <CustomAction
      Id="Remove64BitPath"
      BinaryKey="WixCA"
      DllEntry="CAQuietExec64"
      Execute="deferred"
      Return="ignore" />
    <CustomAction
      Id="Remove64BitProgramFiles_SetProp"
      Property="Remove64BitProgramFiles"
      Value="&quot;[%WINDIR]\System32\cmd.exe&quot; /c IF EXIST &quot;[ProgramFiles64Folder]<%= settings[:pl_company_name] %>\&quot; rmdir /s /q &quot;[ProgramFiles64Folder]<%= settings[:pl_company_name] %>&quot;"
      Execute="immediate" />
    <CustomAction
      Id="Remove64BitProgramFiles"
      BinaryKey="WixCA"
      DllEntry="CAQuietExec64"
      Execute="deferred"
      Return="ignore" />
    <%-end-%>
  </Fragment>
</Wix>
